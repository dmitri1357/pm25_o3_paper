#!/usr/bin/env python3

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt   
from mpl_toolkits.basemap import Basemap
from itertools import compress
from collections import Counter     

import matplotlib as mpl
mpl.rc('font',family='Arial')

both_pm25 = np.load('both_pm25.npy')
both_ozone = np.load('both_ozone.npy')

pm_west = np.reshape(both_pm25,(26,60,7665))
pm_west = pm_west[7:,:24,273:7573]
pm_west = np.reshape(pm_west,(456,7300))
oz_west = np.reshape(both_ozone,(26,60,7665))
oz_west = oz_west[7:,:24,273:7573]
oz_west = np.reshape(oz_west,(456,7300))

perc = 90
years = np.arange(2000,2021,1)
year_start = np.arange(0,7300,365)
days1 = []
for k in range(20):
    step = year_start[k]
    annual = np.arange(step,step+365,1)
    dates1 = pd.date_range(start='10/1/{}'.format(years[k]), end='2/28/{}'.format(years[k+1]))
    dates2 = pd.date_range(start='3/1/{}'.format(years[k+1]), end='9/30/{}'.format(years[k+1]))
    dates3 = np.hstack([dates1,dates2])
    for j in range(456):
        cell = pm_west[j,:]
        if np.nanmax(cell) > 0:
            pm1 = pm_west[j,annual]
            oz1 = oz_west[j,annual]
            y1 = np.nanpercentile(pm1,perc)
            x1 = np.where(pm1 > y1, 1, 0)
            y2 = np.nanpercentile(oz1,perc)
            x2 = np.where(oz1 > y2, 1, 0)
            df = pd.DataFrame({'date':dates3,'p1':x1,'o1':x2})
            idx = df.date[(df.p1==1)&(df.o1==1)]
            days1.extend(idx)

count1 = Counter(days1)
items = sorted(count1.items())

vals = []
for k in range(len(count1)):
    vals.append(items[k][1])
vals = (np.array(vals)/375) * 100

keys = []
for k in range(len(count1)):
    keys.append(items[k][0])
    
dates = pd.date_range(start='10/1/2000', end='9/30/2020')
dates = dates[~((dates.month == 2) & (dates.day == 29))]

co_occur = np.zeros(7300)
n = -1
for k in range(7300):
    day = dates[k]
    if day in keys:
        n = n + 1
        co_occur[k] = vals[n]
    else:
        pass
    
perc = np.empty(7300)
for k in range(7300):
    day = co_occur[k]
    if day >= 25: # more than 25% of western US
        perc[k] = 1
    else:
        perc[k] = 0
        
dates = pd.date_range(start='10/1/2000', end='9/30/2020')
dates = dates[~((dates.month == 2) & (dates.day == 29))]

x1 = pd.Series(perc)
only = x1[x1 == 1]
occurs = dates[only.index]
occurs = pd.DataFrame(occurs).rename(columns={0:'Date'})
occurs['month'] = pd.to_datetime(occurs.Date).dt.month
occurs = occurs[~(occurs.month == 1)]
occurs = occurs[~(occurs.month == 2)]
occurs = occurs[~(occurs.month == 3)]
occurs = occurs[~(occurs.month == 4)]
occurs = occurs[~(occurs.month == 5)]
occurs = occurs[~(occurs.month == 6)]
occurs = occurs[~(occurs.month == 10)]
occurs = occurs[~(occurs.month == 11)]
occurs = occurs[~(occurs.month == 12)]

dt = occurs['Date']
day = pd.Timedelta('1d')
breaks = dt.diff() != day
groups = breaks.cumsum().reset_index()
groups1 = Counter(groups.Date)

items = sorted(groups1.items())

# key is the group #, value is the streak length
vals = []
for k in range(len(items)):
    vals.append(items[k][1])

keys = []
for k in range(len(items)):
    keys.append(items[k][0])

occurs['year'] = occurs['Date'].dt.year # extract years
years_list = list(occurs.year)
yrs = np.arange(2001,2021,1)
longest = []
for k in range(20):
    yr = yrs[k]
    longest.append(years_list.count(yr))
    
groups = pd.DataFrame(groups)
streak_years = []
for k in range(len(items)):
    key = keys[k]
    group = list(groups.index[groups['Date'] == key])
    year = list(occurs['year'].iloc[group])
    year = year[0]
    streak_years.append(year)

streak_years = pd.Series(streak_years)
vals = pd.Series(vals)
df = pd.concat([streak_years,vals], axis=1)
years = np.arange(2001,2021,1)
longest = []
for k in range(20):
    year = years[k]
    x1 = df[df.iloc[:,0] == year]
    longest.append(np.max(x1.iloc[:,1]))
longest = np.nan_to_num(longest,0)

years_list = list(occurs.year)
yrs = np.arange(2001,2021,1)
year_counts = []
for k in range(20):
    yr = yrs[k]
    year_counts.append(years_list.count(yr))

# plot A

fig = plt.figure(figsize=(8,6))
plt.grid(linewidth=0.5)
plt.plot(year_counts, '-*', markersize=15, color='tab:brown')
plt.plot(longest, '-o', markersize=7, color='tab:green')
plt.xticks(np.arange(0,20,1), ('2001','','','','2005','','','',
           '','2010','','','','','2015','','','','','2020'), fontsize = 15)
plt.yticks(np.arange(0,30,5), fontsize=15)
plt.ylabel('Number of days', fontsize = 17)
plt.xlabel('Year', fontsize = 17)
plt.title('(A) Widespread co-occurrence days', fontsize = 17)
l = plt.legend(['Total JAS days (+0.62 d $\mathregular{y^-}$$\mathregular{^1}$, $\it{p}$ = 0.002)',
            'Most consecutive days (+0.31 d $\mathregular{y^-}$$\mathregular{^1}$, $\it{p}$ = 0.001)'], 
            loc='upper left', fontsize=13)
for text in l.get_texts():
    s = str(text)
    if s[12] == 'T':
        text.set_color('tab:brown')
    else:
        text.set_color('tab:green')
        
